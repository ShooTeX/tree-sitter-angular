===========
Expression
===========

value

---

(program
  (expression
    (identifier)))

===========
Pipes
===========

value$ | async

---

(program
  (expression
    (identifier)
    pipes:
      (pipe_sequence
        (pipe_call
          name: (identifier)))))

===========
Pipes (series)
===========

value$ | pipe1 | pipe2 | async

---

(program
  (expression
    (identifier)
    pipes:
      (pipe_sequence
        (pipe_call
          name: (identifier))
        (pipe_call
          name: (identifier))
        (pipe_call
          name: (identifier)))))

==============
Pipe arguments
==============

value$ | myPipe:arg1:123

---

(program
  (expression
    (identifier)
    pipes:
      (pipe_sequence
        (pipe_call
          name: (identifier)
          arguments:
            (pipe_arguments
              (identifier)
              (number))))))

==============
Unary Operators
==============

!(test$ | async)

---

(program
  (unary_expression
    operator: (unary_operator)
    value: (expression
            (group
              (expression
                (identifier)
                pipes: (pipe_sequence
                  (pipe_call
                    name: (identifier))))))))

=====================
Assignment expression
=====================

myValue = !myValue

---

(program
  (assignment_expression
    name: (identifier)
    value: (unary_expression
      operator: (unary_operator)
      value: (expression
        (identifier)))))

========
Grouping
========

((test$ | async) + 2)

---

(program
  (expression
    (group
      (binary_expression
        left: (group
          (expression
            (identifier)
            pipes: (pipe_sequence
              (pipe_call
                name: (identifier)))))
        right: (number)))))

==============
Function calls
==============

$any(this).prop

---

(program
  (expression
    (member_expression
      object: (call_expression
        function: (identifier)
        arguments: (arguments
          (identifier)))
      property: (identifier))))

=====================
Structural assignment
=====================

let item of list

---

(program
  (structural_declaration
    (structural_assignment
      name: (identifier)
      operator: (identifier)
      value: (expression
        (identifier)))))

=============================
Structural assignment (pipes)
=============================

let item of (list | async)

---

(program
  (structural_declaration
    (structural_assignment
      name: (identifier)
      operator: (identifier)
      value: (expression
        (group
          (expression
            (identifier)
            pipes: (pipe_sequence
              (pipe_call
                name: (identifier)))))))))

=============================
Structural assignment (keyed)
=============================

let item of list; myKey: $index

---

(program
  (structural_declaration
    (structural_assignment
      name: (identifier)
      operator: (identifier)
      value: (expression
        (identifier)))
    (structural_assignment
      name: (identifier)
      value: (identifier))))

===============================
Structural assignment (aliased)
===============================

let item of list; myKey as $index

---

(program
  (structural_declaration
    (structural_assignment
      name: (identifier)
      operator: (identifier)
      value: (expression
        (identifier)))
    (structural_assignment
      name: (identifier)
      alias: (identifier))))

======
Object
======

{ key: someValue }

---

(program
  (expression
    (object
      (pair
        key: (identifier)
        value: (expression
          (identifier))))))

==================
Object expressions
==================

{ key: (someValue | async) }

---

(program
  (expression
    (object
      (pair
        key: (identifier)
        value: (expression
          (group
            (expression
              (identifier)
              pipes: (pipe_sequence
                (pipe_call
                  name: (identifier))))))))))

=====
Array
=====

[someValue]

---

(program
  (expression
    (array
      (expression
        (identifier)))))

=================
Array expressions
=================

[(someValue | async)]

---

(program
  (expression
    (array
      (expression
        (group
          (expression
            (identifier)
            pipes: (pipe_sequence
              (pipe_call
                name: (identifier)))))))))

==================
Binary expressions
==================

someValue == 123
someValue != 123
someValue === 123
someValue !== 123
someValue && 123
someValue || 123

---

(program
  (binary_expression
    left: (identifier)
    right: (number))
  (binary_expression
    left: (identifier)
    right: (number))
  (binary_expression
    left: (identifier)
    right: (number))
  (binary_expression
    left: (identifier)
    right: (number))
  (binary_expression
    left: (identifier)
    right: (number))
  (binary_expression
    left: (identifier)
    right: (number)))

==================
Member Expressions
==================

test?.blorg.pizza

---

(program
  (expression
    (member_expression
      object: (member_expression
        object: (identifier)
        property: (identifier))
      property: (identifier))))
